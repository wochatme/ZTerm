// This is most part of ZTerm logic
static const unsigned int xbmpDLeftN[24 * 24] = 
{
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF484848,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF484848,0xFFFFFFFF,0xFF838383,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF484848,0xFFFFFFFF,0xFF838383,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF484848,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E
};

static const unsigned int xbmpDLeftP[24 * 24] =
{
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF484848,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF484848,0xFFFFFFFF,0xFF838383,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF484848,0xFFFFFFFF,0xFF838383,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF808080,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF484848,0xFF353535,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E
};

static const unsigned int xbmpDRightN[24 * 24] =
{
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF484848,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF838383,0xFFFFFFFF,0xFF484848,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF838383,0xFFFFFFFF,0xFF484848,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF484848,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E
};

static const unsigned int xbmpDRightP[24 * 24] =
{
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF484848,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF838383,0xFFFFFFFF,0xFF484848,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF838383,0xFFFFFFFF,0xFF484848,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF808080,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF5B5B5B,0xFFFFFFFF,0xFF5B5B5B,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF353535,0xFF484848,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,
0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E,0xFF2E2E2E
};

extern "C" IMAGE_DOS_HEADER __ImageBase;
#define HINST_THISCOMPONENT ((HINSTANCE) & __ImageBase)

// Release an IUnknown* and set to nullptr.
// While IUnknown::Release must be noexcept, it isn't marked as such so produces
// warnings which are avoided by the catch.
template<class T>
inline void ReleaseUnknown(T*& ppUnknown) noexcept
{
    if (ppUnknown)
    {
        try
        {
            ppUnknown->Release();
        }
        catch (...)
        {
            // Never occurs
        }
        ppUnknown = nullptr;
    }
}

/// Find a function in a DLL and convert to a function pointer.
/// This avoids undefined and conditionally defined behaviour.
template<typename T>
inline T DLLFunction(HMODULE hModule, LPCSTR lpProcName) noexcept
{
    if (!hModule)
    {
        return nullptr;
    }
    FARPROC function = ::GetProcAddress(hModule, lpProcName);
    static_assert(sizeof(T) == sizeof(function));
    T fp{};
    memcpy(&fp, &function, sizeof(T));
    return fp;
}

static constexpr const wchar_t* gptPaneClassName{ L"GPT_PANE_WINDOW_CLASS" };

static bool ztIntilaized{ false };

#define ZT_DIRECT2D_OK      (0x00000001)
#define ZT_LIBCURL_OK       (0x00000002)
#define ZT_SCINTILLA_OK     (0x00000004)

static DWORD ztStatus { 0 };

volatile LONG g_threadCount = 0;
volatile LONG g_threadCountBKG = 0;
volatile LONG g_Quit = 0;
volatile LONG g_threadPing = 0;
volatile LONG g_threadPingNow = 1;

/* used to sync different threads */
CRITICAL_SECTION g_csSendMsg;
CRITICAL_SECTION g_csReceMsg;

ID2D1Factory* g_pD2DFactory = nullptr;
static D2D1_DRAW_TEXT_OPTIONS d2dDrawTextOptions = D2D1_DRAW_TEXT_OPTIONS_NONE;
static HMODULE hDLLD2D{};

static void LoadD2DOnce() noexcept
{
    DWORD loadLibraryFlags = 0;
    HMODULE kernel32 = ::GetModuleHandleW(L"kernel32.dll");
    if (kernel32)
    {
        if (::GetProcAddress(kernel32, "SetDefaultDllDirectories"))
        {
            // Availability of SetDefaultDllDirectories implies Windows 8+ or
            // that KB2533623 has been installed so LoadLibraryEx can be called
            // with LOAD_LIBRARY_SEARCH_SYSTEM32.
            loadLibraryFlags = LOAD_LIBRARY_SEARCH_SYSTEM32;
        }
    }

    typedef HRESULT(WINAPI * D2D1CFSig)(D2D1_FACTORY_TYPE factoryType, REFIID riid, CONST D2D1_FACTORY_OPTIONS * pFactoryOptions, IUnknown * *factory);

    hDLLD2D = ::LoadLibraryEx(TEXT("D2D1.DLL"), 0, loadLibraryFlags);
    D2D1CFSig fnD2DCF = DLLFunction<D2D1CFSig>(hDLLD2D, "D2D1CreateFactory");
    if (fnD2DCF)
    {
        // A multi threaded factory in case Scintilla is used with multiple GUI threads
        fnD2DCF(D2D1_FACTORY_TYPE_SINGLE_THREADED, /*D2D1_FACTORY_TYPE_MULTI_THREADED,*/
                __uuidof(ID2D1Factory),
                nullptr,
                reinterpret_cast<IUnknown**>(&g_pD2DFactory));
    }
}

static bool LoadD2D() noexcept
{
    static std::once_flag once;
    try
    {
        std::call_once(once, LoadD2DOnce);
    }
    catch (...)
    {
        // ignore
    }
    return g_pD2DFactory;
}

void ztInit() noexcept
{
    if (!ztIntilaized)
    {
        g_Quit = 0;
        g_threadCount = 0;
        g_threadCountBKG = 0;
        g_threadPing = 0;

	/* these two are Critial Sections to sync different threads */
        InitializeCriticalSection(&g_csSendMsg);
        InitializeCriticalSection(&g_csReceMsg);

        if (LoadD2D())
            ztStatus |= ZT_DIRECT2D_OK;

        if(Scintilla_RegisterClasses(HINST_THISCOMPONENT))
            ztStatus |= ZT_SCINTILLA_OK;
#if 0
        if(CURLE_OK == curl_global_init(CURL_GLOBAL_ALL))
            ztStatus |= ZT_LIBCURL_OK;
#endif 
    }
    ztIntilaized = true;
}

void ztTerm() noexcept
{
    if (ztIntilaized)
    {
#if 0
        if (ztStatus & ZT_LIBCURL_OK)
        {
            curl_global_cleanup();
        }
#endif
        if (ztStatus & ZT_SCINTILLA_OK)
        {
            Scintilla_ReleaseResources();
        }

        if (ztStatus & ZT_DIRECT2D_OK)
        {
            ReleaseUnknown(g_pD2DFactory);
            if (hDLLD2D)
            {
                FreeLibrary(hDLLD2D);
                hDLLD2D = {};
            }
        }
        ztStatus = 0;
    }
}

HRESULT NonClientIslandWindow::CreateDeviceDependantResource(RECT* lpRect)
{
    HRESULT hr = S_OK;
    if (nullptr == m_pD2DRenderTarget) // Create a Direct2D render target.
    {
        RECT rc;

        const int integralDeviceScaleFactor = GetFirstIntegralMultipleDeviceScaleFactor();
        D2D1_RENDER_TARGET_PROPERTIES drtp{};
        drtp.type = D2D1_RENDER_TARGET_TYPE_DEFAULT;
        drtp.usage = D2D1_RENDER_TARGET_USAGE_NONE;
        drtp.minLevel = D2D1_FEATURE_LEVEL_DEFAULT;
        drtp.dpiX = 96.f * integralDeviceScaleFactor;
        drtp.dpiY = 96.f * integralDeviceScaleFactor;
        // drtp.pixelFormat = D2D1::PixelFormat(DXGI_FORMAT_UNKNOWN, D2D1_ALPHA_MODE_UNKNOWN);
#if 0
			if (AppInDarkMode())
				drtp.pixelFormat = D2D1::PixelFormat(DXGI_FORMAT_R8G8B8A8_UNORM, D2D1_ALPHA_MODE_IGNORE);
			else
#endif
        drtp.pixelFormat = D2D1::PixelFormat(DXGI_FORMAT_R8G8B8A8_UNORM, D2D1_ALPHA_MODE_PREMULTIPLIED);

        rc.left = lpRect->left;
        rc.top = lpRect->top;
        rc.right = lpRect->right;
        rc.bottom = lpRect->bottom;

        D2D1_HWND_RENDER_TARGET_PROPERTIES dhrtp{};
        dhrtp.hwnd = m_paneWindow.get();
        dhrtp.pixelSize = GetSizeUFromRect(rc, integralDeviceScaleFactor);
        dhrtp.presentOptions = D2D1_PRESENT_OPTIONS_NONE;

        hr = g_pD2DFactory->CreateHwndRenderTarget(drtp, dhrtp, &m_pD2DRenderTarget);
#if 0
        if (S_OK == hr && m_pD2DRenderTarget)
        {
            int w, h;
            int result = 0;

            ReleaseUnknown(m_pBitmapPixel);

            if (result == 0)
            {
                U32 pixel[1];
                pixel[0] = AppInDarkMode() ? BACKGROUND_DARK : BACKGROUND_LIGHT;
                w = h = 1;
                hr = m_pD2DRenderTarget->CreateBitmap(D2D1::SizeU(w, h), pixel, (w << 2), D2D1::BitmapProperties(D2D1::PixelFormat(DXGI_FORMAT_R8G8B8A8_UNORM, D2D1_ALPHA_MODE_PREMULTIPLIED)), &m_pBitmapPixel);
                if (S_OK != hr || !m_pBitmapPixel)
                    result++;
            }
            if (result)
                hr = E_FAIL;
        }
#endif
    }
    return hr;
}

void NonClientIslandWindow::ztMakePaneWindow() noexcept
{
    static auto paneAIWindowClass{ []() {
        WNDCLASSEX wcEx{};
        wcEx.cbSize = sizeof(wcEx);
        wcEx.style = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS;
        wcEx.lpszClassName = gptPaneClassName;
        wcEx.hbrBackground = reinterpret_cast<HBRUSH>(GetStockObject(BLACK_BRUSH));
        wcEx.hCursor = LoadCursor(nullptr, IDC_ARROW);
        wcEx.lpfnWndProc = &NonClientIslandWindow::ztStaticPaneWndProc;
        wcEx.hInstance = wil::GetModuleInstanceHandle();
        wcEx.cbWndExtra = sizeof(NonClientIslandWindow*);
        return RegisterClassEx(&wcEx);
    }() };

    // The drag bar window is a child window of the top level window that is put
    // right on top of the drag bar. The XAML island window "steals" our mouse
    // messages which makes it hard to implement a custom drag area. By putting
    // a window on top of it, we prevent it from "stealing" the mouse messages.
    m_paneWindow.reset(CreateWindowExW(WS_EX_LAYERED,
                                         gptPaneClassName,
                                         L"",
                                         WS_CHILD,
                                         0,
                                         0,
                                         0,
                                         0,
                                         GetHandle(),
                                         nullptr,
                                         wil::GetModuleInstanceHandle(),
                                         this));
    THROW_HR_IF_NULL(E_UNEXPECTED, m_paneWindow);
    SetLayeredWindowAttributes(m_paneWindow.get(), 0, 255, LWA_ALPHA);
}

[[nodiscard]] LRESULT __stdcall NonClientIslandWindow::ztStaticPaneWndProc(HWND const window, UINT const message, WPARAM const wparam, LPARAM const lparam) noexcept
{
    WINRT_ASSERT(window);

    if (WM_NCCREATE == message)
    {
        auto cs = reinterpret_cast<CREATESTRUCT*>(lparam);
        auto nonClientIslandWindow{ reinterpret_cast<NonClientIslandWindow*>(cs->lpCreateParams) };
        SetWindowLongPtr(window, GWLP_USERDATA, reinterpret_cast<LONG_PTR>(nonClientIslandWindow));

        // fall through to default window procedure
    }
    else if (auto nonClientIslandWindow{ reinterpret_cast<NonClientIslandWindow*>(GetWindowLongPtr(window, GWLP_USERDATA)) })
    {
        return nonClientIslandWindow->ztPaneWindowMessageHandler(message, wparam, lparam);
    }

    return DefWindowProc(window, message, wparam, lparam);
}

[[nodiscard]] LRESULT NonClientIslandWindow::ztPaneWindowMessageHandler(UINT const message, WPARAM const wparam, LPARAM const lparam) noexcept
{
    ztAdjustLayoutDPI(_currentDpi, false);

    switch (message)
    {
    case WM_ERASEBKGND:
        return 1;
    case WM_PAINT:
        {
            HRESULT hr;
            PAINTSTRUCT ps{ 0 };
            BeginPaint(m_paneWindow.get(), &ps);
            hr = CreateDeviceDependantResource(&m_rectClient);
            if (S_OK == hr && m_pD2DRenderTarget)
            {
                int dpiWH, offset;
                int wh = 24;
                ID2D1Bitmap* pBitmap = nullptr;

                m_pD2DRenderTarget->BeginDraw();
                m_pD2DRenderTarget->Clear(D2D1::ColorF(0x2e2e2e));

                hr = m_pD2DRenderTarget->CreateBitmap(D2D1::SizeU(wh, wh), xbmpDLeftN, (wh << 2),
                    D2D1::BitmapProperties(D2D1::PixelFormat(DXGI_FORMAT_R8G8B8A8_UNORM, D2D1_ALPHA_MODE_PREMULTIPLIED)), &pBitmap);

                if (S_OK == hr && pBitmap)
                {
                    dpiWH = MulDiv(_currentDpi, wh, USER_DEFAULT_SCREEN_DPI);
                    offset = (m_widthPaneWindow - dpiWH) >> 1;
                    D2D1_RECT_F area = D2D1::RectF(
                        static_cast<FLOAT>(m_rectClient.right - offset - dpiWH),
                        static_cast<FLOAT>(m_rectClient.top + offset),
                        static_cast<FLOAT>(m_rectClient.right - offset),
                        static_cast<FLOAT>(m_rectClient.top + offset + dpiWH));
                    m_pD2DRenderTarget->DrawBitmap(pBitmap, &area);
                }
                ReleaseUnknown(pBitmap);

                hr = m_pD2DRenderTarget->EndDraw();
                if (FAILED(hr) || D2DERR_RECREATE_TARGET == hr)
                {
                    ReleaseUnknown(m_pD2DRenderTarget);
                }
            }

            EndPaint(m_paneWindow.get(), &ps);
        }
        return 0;
    case WM_SIZE:
        GetClientRect(m_paneWindow.get(), &m_rectClient);
        ReleaseUnknown(m_pD2DRenderTarget);
        break;
    case WM_LBUTTONDOWN:
        SetFocus(_interopWindowHandle);
        return 0;
    case WM_LBUTTONUP:
        SetFocus(m_paneWindow.get());
        return 0;
    default:
        break;
    }

    return DefWindowProc(m_paneWindow.get(), message, wparam, lparam);
}

void NonClientIslandWindow::ztAdjustLayoutDPI(unsigned int dpi, bool bUpdate) noexcept
{
    m_widthPaneWindow = ::MulDiv(TITLE_BAR_HEIGHT_NORMAL, dpi, USER_DEFAULT_SCREEN_DPI);

    if (bUpdate)
    {
        RECT rc{};
        GetClientRect(GetHandle(), &rc);

        _UpdateIslandPosition(static_cast<UINT>(rc.right - rc.left), static_cast<UINT>(rc.bottom - rc.top));

    }
}

//LRESULT NonClientIslandWindow::ztMesssageHandler(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled) noexcept
LRESULT NonClientIslandWindow::ztMesssageHandler(UINT uMsg, WPARAM, LPARAM, BOOL& bHandled) noexcept
{
    bHandled = FALSE;

    switch (uMsg)
    {
    case WM_CREATE:
        ztInit();
        break;
    case WM_DESTROY:
        ztTerm();
        break;
    default:
        break;
    }
    return 0L;
}
